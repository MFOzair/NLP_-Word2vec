# Import necessary libraries
import gensim
from nltk.corpus import stopwords
from romeo_juliet import romeo_and_juliet  # Assuming romeo_and_juliet is a module or file with text

# Load stop words from NLTK
stop_words = stopwords.words('english')

# Preprocess the text:
# - Convert to lowercase
# - Tokenize the text by splitting on spaces
# - Remove stop words
romeo_and_juliet_processed = [
    [word for word in romeo_and_juliet.lower().split() if word not in stop_words]
]

# Print the first 20 words of the processed text to verify
print("Sample processed words:", romeo_and_juliet_processed[0][:20])

# Train a Word2Vec model:
# - size: Number of dimensions of the word vectors (100)
# - min_count: Ignores words with total frequency less than 1
# - workers: Number of threads to use for training
# - sg: Skip-gram model (1 for skip-gram, 0 for CBOW)
model = gensim.models.Word2Vec(
    romeo_and_juliet_processed, size=100, min_count=1, workers=2, sg=1
)

# View the vocabulary generated by the model
# Note: 'wv.key_to_index' replaces 'wv.vocab' in newer gensim versions
vocabulary = list(model.wv.key_to_index.keys())
print("Vocabulary size:", len(vocabulary))

# Find words similar to "romeo" based on the trained Word2Vec model
similar_to_romeo = model.wv.most_similar('romeo', topn=20)
print("\nWords similar to 'romeo':")
for word, similarity in similar_to_romeo:
    print(f"{word}: {similarity:.2f}")

# Identify the word that doesn't fit in the group
# Words: "romeo", "juliet", "mercutio"
not_star_crossed_lover = model.wv.doesnt_match(["romeo", "juliet", "mercutio"])
print("\nWord that doesn't fit in ['romeo', 'juliet', 'mercutio']:", not_star_crossed_lover)
